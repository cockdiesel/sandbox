!function (a, b, c, d) { function j(b) { "down" == b.options.direction ? (a(b.active).removeClass("ui-corner-all").addClass("ui-corner-top"), a(b.activeSelection).removeClass("ui-corner-left").addClass("ui-corner-tl"), a(b.items).addClass("ui-corner-bottom").css({ top: parseInt(Math.ceil(a(b.active).position().top), 10) + parseInt(a(b.active).css("line-height"), 10) + 1, left: parseInt(Math.ceil(a(b.active).position().left), 10) }), a(b.items).width() > a(b.active).width() && a(b.items).addClass("ui-corner-tr")) : (a(b.active).removeClass("ui-corner-all").addClass("ui-corner-bottom"), a(b.activeSelection).removeClass("ui-corner-left").addClass("ui-corner-bl"), a(b.items).addClass("ui-corner-top").css({ top: parseInt(Math.ceil(a(b.active).position().top)) - a(b.items).height() - 1, left: parseInt(Math.ceil(a(b.active).position().left), 10) }), a(b.items).width() > a(b.active).width() && a(b.items).addClass("ui-corner-br")); var c = a(b.items).find("li:eq(" + b.element.options.selectedIndex + ")"); a(c).addClass("select-menu-item-hover"), a(c).children("i").addClass("select-menu-icon-hover"), a(b.items).css("overflow-y", "auto").show("slide", { direction: "down" == b.options.direction ? "up" : "down" }, 200, function () { var d = a(c).position().top; parseInt(d) > 260 && 0 != b.element.options.selectedIndex && a(b.items).scrollTop(a(c).position().top - 60) }) } function k(b) { "down" == b.options.direction ? (a(b.items).css("overflow-y", "hidden").hide("slide", { direction: "up" }, 200, function () { a(this).removeClass("ui-corner-tr") }), a(b.activeSelection).removeClass("ui-corner-tl").addClass("ui-corner-left"), a(b.active).removeClass("ui-corner-top").addClass("ui-corner-all")) : (a(b.items).css("overflow-y", "hidden").hide("slide", { direction: "down" }, 200, function () { a(this).removeClass("ui-corner-br") }), a(b.activeSelection).removeClass("ui-corner-bl").addClass("ui-corner-left"), a(b.active).removeClass("ui-corner-bottom").addClass("ui-corner-all")) } function l(a, b) { if ("#text" != b.nodeName.toLowerCase()) { var d = b.getAttribute("class"), e = c.createElement("li"); e.setAttribute("data-value", b.value); var f = c.createTextNode(b.text); e.appendChild(f); var g; null != d && (g = c.createElement("i"), g.setAttribute("class", d + " icon-fixed-width"), e.insertBefore(g, f)), a.appendChild(e) } } var e = "selectMenu", f = 1, g = "select-menu-active", h = "select-menu-items", i = function (b, c) { this.element = b, this.$element = a(b), this.options = a.extend({}, a.fn.selectMenu.defaults, c), this._init() }; i.prototype = { _init: function () { this.seed = f, this._createElements(), this._bindEvents(), f++ }, _createElements: function () { var a = parseInt(b.getComputedStyle(c.getElementsByTagName("html")[0]).fontSize, 10); this.element.style.visibility = "hidden", this.element.style.display = "none", this.element.style.opacity = 0; var d = c.createElement("div"); d.setAttribute("class", g + " ui-corner-all"), d.setAttribute("data-selectmenu", f), d.style.width = this.options.width + "px", d.style.width = parseFloat(this.options.width / a) + "rem", d.style.top = this.options.position.top + "px", d.style.left = this.options.position.left + "px"; var e = c.createElement("div"); e.setAttribute("class", "select-list-active-item ui-corner-left"), e.style.width = this.options.width + "px", e.style.width = parseFloat(this.options.width / a) - 2.5 + "rem"; var i = c.createElement("div"), j = c.createElement("i"); j.setAttribute("class", this.options.icon), d.appendChild(e), i.appendChild(j), d.appendChild(i); var k = c.createElement("div"); k.setAttribute("class", h), k.style.width = this.options.menuWidth > this.options.width ? this.options.menuWidth : this.options.width + "px", k.style.width = this.options.menuWidth > this.options.width ? parseFloat(this.options.menuWidth / a) : parseFloat(this.options.width / a) + "rem"; var m = c.createElement("ul"); m.setAttribute("class", h); for (var n = 0; n < this.element.childNodes.length; n++) { var o = this.element.childNodes[n], p = o.nodeName.toLowerCase(); if ("optgroup" == p && o.hasChildNodes()) { var q = c.createElement("ul"); q.setAttribute("class", "select-menu-items-group"), q.setAttribute("optgroup", o.getAttribute("label")); var j = o.getAttribute("class"), r = c.createElement("span"), s = c.createTextNode(o.getAttribute("label")); r.setAttribute("class", "select-menu-items-group"), r.appendChild(s); var t; null != j && (t = c.createElement("i"), t.setAttribute("class", j + " icon-fixed-width"), r.insertBefore(t, s)); for (var u = 0; u < o.childNodes.length; u++) l(q, o.childNodes[u]); m.appendChild(r), m.appendChild(q) } else "option" == p && l(m, o); 0 == n && e.appendChild(c.createTextNode(0 == this.element.options[0].text.length ? String.fromCharCode(160) : this.element.options[0].text)) } k.appendChild(m), this.$element.after(k), this.$element.after(d), this.active = d, this.activeSelection = e, this.activeIcon = i, this.items = k }, _bindEvents: function () { var b = this; a(b.active).bind("click", function () { j(b) }); var e = a(b.items).find("ul.select-menu-items > li,ul.select-menu-items-group > li"); a(e).bind("click", function () { var c = a(this).parents("ul").attr("optgroup"), e = c == d ? !1 : c; if (e) b.$element.find("optgroup[label='" + c + "'] option:eq(" + a(this).index() + ")").prop("selected", "selected"); else { var f = a(this).index(), g = a(this).parents("ul:first").children("ul"), h = a(this).parents("ul:first").children("li"); if (0 != g.length) { var i = 0; g.each(function () { a(this).index() < f && a(this).children("li").each(function () { i++ }) }), h.each(function () { a(this).index() < f && i++ }), 0 != i && (f = i) } b.$element.prop("selectedIndex", f) } a(b.activeSelection).text(a(this).text()), b.options.onSelect.call(this, b.element.options[b.element.options.selectedIndex]) }), a(e).bind("mouseenter", function () { a(e).each(function () { a(this).removeClass("select-menu-item-hover"), a(this).children("i").removeClass("select-menu-icon-hover") }), a(this).addClass("select-menu-item-hover"), a(this).children("i").addClass("select-menu-icon-hover") }), a(e).bind("mouseleave", function () { a(this).removeClass("select-menu-item-hover"), a(this).children("i").removeClass("select-menu-icon-hover") }), a(b.activeIcon).bind("click", function (c) { a(b.items).is(":visible") && (k(b), c.stopImmediatePropagation()) }), a(c).bind("click", function (c) { var d = a(c.target).parents("div." + g).length; 0 == d && -1 == c.target.className.indexOf("select-menu-active") && k(b) }) }, _unbindEvents: function () { var b = this; a(b.active).unbind("click"); var d = a(b.items).find("ul.select-menu-items > li,ul.select-menu-items-group > li"); a(d).unbind("click"), a(d).unbind("mouseenter"), a(d).unbind("mouseleave"), a(b.activeIcon).unbind("click"), a(c).unbind("click", function (c) { var d = a(c.target).parents("div." + g).length; 0 == d && -1 == c.target.className.indexOf("select-menu-active") && k(b) }) }, destroy: function () { this._unbindEvents() } }, a.fn.selectMenu = function (b) { return this.each(function () { a.data(this, e) ? a.isFunction(i.prototype[b]) && (a.data(this, e)[b](), "destroy" == b && (a.removeData(this, e), f = 1)) : a.data(this, e, new i(this, b)) }) }, a.fn.selectMenu.defaults = { width: 220, menuWidth: 220, direction: "down", icon: "icon-chevron-down", position: { left: 0, top: 0 }, onSelect: function () { } } }(jQuery, window, document);